{"version":3,"sources":["App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["App","connect","a","console","log","navigator","serial","requestPort","port","open","baudrate","clickConnect","document","addEventListener","getElementById","classList","toggle","className","id","class","xmlns","viewBox","fill","fill-rule","d","clip-rule","src","process","alt","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","URL","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.8017d01e.chunk.js","sourcesContent":["import React from 'react';\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\nimport './App.css';\n\nfunction App() {\n\n  document.addEventListener(\"DOMContentLoaded\", () => {\n\n    const lemonConnect = document.getElementById(\"lemonConnect\");\n    lemonConnect.addEventListener(\"click\", clickConnect);\n\n    const orangeConnect = document.getElementById(\"orangeConnect\");\n    orangeConnect.addEventListener(\"click\", clickConnect);\n\n    const splashConnect = document.getElementById(\"splashConnect\");\n    splashConnect.addEventListener(\"click\", clickConnect);\n\n    const flowerConnect = document.getElementById(\"flowerConnect\");\n    flowerConnect.addEventListener(\"click\", clickConnect);\n\n    const notSupported = document.getElementById('notSupported');\n    notSupported.classList.toggle('hidden', 'serial' in navigator);\n  });\n\n  async function connect() {\n    console.log('estabilishing connection...')\n    const port = await navigator.serial.requestPort();\n    await port.open({ baudrate: 9600 });\n  }\n\n  async function clickConnect() {\n    await connect();\n  }\n\n  return (\n    <div className=\"main\">\n\n      <div id=\"notSupported\" class=\"hidden\">\n        Sorry, <b>Web Serial</b> is not supported on this device, make sure you're \n        running Chrome 78 or later and have enabled the \n        <code>#enable-experimental-web-platform-features</code> flag in\n        <code>chrome://flags</code>\n      </div>\n\n      <div className=\"top\">\n      <div className=\"arrow\">\n        <div className=\"svg-wrap\">\n          <svg className=\"arrow-svg\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"2 2 20 20\" fill=\"currentColor\">\n            <path fill-rule=\"evenodd\" d=\"M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z\" clip-rule=\"evenodd\" />\n          </svg>\n        </div>\n      </div>\n      <div className=\"menu\">\n        <LazyLoadImage src={process.env.PUBLIC_URL + '/assets/icon-two.PNG'} \n        className=\"menu-img\" \n        alt=\"menu\" />\n      </div>\n      <div className=\"logo\">\n        <LazyLoadImage src={process.env.PUBLIC_URL + '/assets/logo.PNG'} \n        className=\"logo-img\" \n        alt=\"logo\" />\n      </div>\n      </div>\n      <div className=\"container\">\n          <h1 className=\"h-one\">LIKED IT!</h1>\n          <h1 className=\"h-two\">Let's try some more<br></br>fragrance options</h1>\n            <div className=\"lemon\" id=\"lemonConnect\" >\n              <LazyLoadImage src={process.env.PUBLIC_URL + '/assets/lemon.png'} \n              className=\"lemon-img\"\n              alt=\"lemon\"\n              />\n            </div>\n            <div className=\"orange\" id=\"orangeConnect\" >\n              <LazyLoadImage src={process.env.PUBLIC_URL + '/assets/orange.png'} \n              className=\"orange-img\"\n              alt=\"orange\"\n              />\n            </div>\n            <div className=\"splash\" id=\"splashConnect\" >\n              <LazyLoadImage src={process.env.PUBLIC_URL + '/assets/splash.png'} \n              className=\"splash-img\"\n              alt=\"splash\"\n              />\n            </div>\n            <div className=\"flower\" id=\"flowerConnect\" >\n              <LazyLoadImage src={process.env.PUBLIC_URL + '/assets/flower.png'} \n              className=\"flower-img\"\n              alt=\"flower\"\n              />\n            </div>\n          <h1 className=\"h-three\">Not just FRAGNANCE FRESH</h1>\n          <h1 className=\"h-four\">but now get your<br></br>laundry</h1>\n          <h1 className=\"h-five\">refreshed</h1>\n          <h1 className=\"h-six\">with steam</h1>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}